---
title: "Building Propensity Score Models"
author: "Lucy D'Agostino McGowan"
format: 
  kakashi-revealjs:
    self-contained: true
footer: "Slides by [Dr. Lucy D'Agostino McGowan](https://lucymcgowan.com)"
---


## Observational Studies {background-color="#23373B"}

```{r}
#| include: false
options(
  tibble.max_extra_cols = 6, 
  tibble.width = 60
)
```

![](images/obs-studies-3.png)

## {background-color="#23373B"}

![](images/trt.png)

## {background-color="#23373B"}

![](images/trt-conf.png)

## Confounding {background-color="#23373B"}


![](images/conf-2.png)


## Confounding {background-color="#23373B"}

![](images/conf-3.png)

## Propensity scores

Rosenbaum and Rubin showed in observational studies, conditioning on **propensity scores** can lead to unbiased estimates of the exposure effect

1. There are no unmeasured confounders
2. Every subject has a nonzero probability of receiving either exposure

## Propensity scores

* Fit a **logistic regression** predicting exposure using known covariates

::: {.fragment}
$$Pr(exposure = 1) = \frac{1}{1+\exp(-X\beta)}$$
:::

* Each individuals' predicted values are the **propensity scores**

## Propensity scores

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(broom)
```

## Propensity scores

```{r}
#| eval: false
glm(exposure ~ confounder_1 + confounder_2 + confounder_3 + ..., 
    data = df,
    family = binomial())
```

---

## Propensity scores

```{r}
#| eval: false
#| code-line-numbers: "|4"
glm(exposure ~ confounder_1 + confounder_2 + confounder_3 + ..., 
    data = df,
    family = binomial()) |>
  augment(type.predict = "response", data = df) 
```

## Propensity scores {background-color="#23373B"}

![](images/pscores.png)

## Example {.small}

:::: {.columns}

::: {.column width="50%"}

<img src="images/Mickey_and_Walt_Disney.jpg" height="300"></img>

Photo by Anna [CC-BY-SA-4.0](https://creativecommons.org/licenses/by-sa/4.0/deed.en)

:::

::: {.column width="50%"}
Historically, guests who stayed in a Walt Disney World resort hotel were able to access the park during "Extra Magic Hours" during which the park was closed to all other guests.

These extra hours could be in the morning or evening.  

The Seven Dwarfs Mine Train is a ride at Walt Disney World's Magic Kingdom. Typically, each day Magic Kingdom may or may not be selected to have these "Extra Magic Hours".
:::

::::

## {background-color="#23373B" .large .center}

**We are interested in examining the relationship between whether there were "Extra Magic Hours" in the morning and the average wait time for the Seven Dwarfs Mine Train the same day between 9am and 10am.**

---

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig.height: 4.0
library(tidyverse)
library(ggdag)
library(ggokabeito)

geom_dag_label_repel <- function(..., seed = 10) {
  ggdag::geom_dag_label_repel(
    aes(x, y, label = label),
    box.padding = 3.5, 
    inherit.aes = FALSE,
    max.overlaps = Inf, 
    family = "sans",
    seed = seed,
    label.size = NA, 
    label.padding = 0.1,
    size = 14 / 3,
    ...
  ) 
}

coord_dag <- list(
  x = c(Season = 0, close = 0, weather = -1, x = 1, y = 2),
  y = c(Season = -1, close = 1, weather = 0, x = 0, y = 0)
)

labels <- c(
  x = "Extra Magic Morning",
  y = "Average wait",
  Season = "Ticket Season",
  weather = "Historic high temperature",
  close = "Time park closed"
)

dagify(
  y ~ x + close + Season + weather,
  x ~ weather + close + Season,
  coords = coord_dag,
  labels = labels,
  exposure = "x",
  outcome = "y"
) |>
  tidy_dagitty() |>
  node_status() |>
  ggplot(
    aes(x, y, xend = xend, yend = yend, color = status)
  ) +
  geom_dag_edges_arc(curvature = c(rep(0, 5), .3, 0)) +
  geom_dag_point() +
  geom_dag_label_repel(seed = 1630) +
  scale_color_okabe_ito(na.value = "grey90") +
  theme_dag() +
  theme(
    legend.position = "none",
    axis.text.x = element_text()
  ) +
  coord_cartesian(clip = "off")# +
  # scale_x_continuous(
  #   limits = c(-1.25, 2.25),
  #   breaks = c(-1, 0, 1, 2),
    # labels = c(
    #   "\n(one year ago)",
    #   "\n(6 months ago)",
    #   "\n(3 months ago)",
    #   "9am - 10am\n(Today)"
    # )
  # )
```

## `Application Exercise`

`r countdown::countdown(minutes = 10)`

::: small
::: nonincremental
1. Open `appex-03.qmd`
1. Using the **confounders** identified, fit a propensity score model for `park_extra_magic_morning`
2.  *Stretch*: Create two histograms, one of the propensity scores for days with extra morning magic hours and one for those without
:::
:::


## Propensity scores {background-color="#23373B" .large}

Matching

Weighting

Stratification

Direct Adjustment

...

## Estimands 

::: {.tiny}
Greifer, N., & Stuart, E. A. (2021). Choosing the estimand when matching or weighting in observational studies. arXiv preprint arXiv:2106.10577. See also [Choosing Estimands](https://www.r-causal.org/chapters/chapter-10#choosing-estimands) in our book.
:::

::: {.center}
![](images/estimand.png){width="70%"}
:::

## Propensity scores {background-color="#23373B" .large}

**Matching**

Weighting

Stratification

Direct Adjustment

...

## Target estimands

```{r}
#| include: false
library(tidyverse)
library(broom)
library(causaldata)
propensity_model <- glm(
  qsmk ~ sex + 
    race + age + I(age^2) + education + 
    smokeintensity + I(smokeintensity^2) + 
    smokeyrs + I(smokeyrs^2) + exercise + active + 
    wt71 + I(wt71^2), 
  family = binomial(), 
  data = nhefs_complete
)
```

### Average Treatment Effect (ATE)

$$\tau = E[Y(1) - Y(0)]$$
```{r}
#| echo: false
#| fig.height: 2.0
set.seed(10)
p <- tibble(
  x = c(runif(10, 0, 0.9), runif(10, 0.1, 1)),
  y = rep(c(1, 0), each = 10),
  col = rep(c("Treated", "Control"), each = 10)
)
set.seed(10)
ggplot(p, aes(x = x, y = y, color = col)) +
  geom_text(aes(label = col), position = "jitter") + 
  theme(legend.position = "none",
        axis.text = element_blank(),
        axis.ticks = element_blank()) +
  scale_color_manual(values = c("cornflower blue", "orange")) +
  labs(x = "", y = "")
```

## Target estimands

### Average Treatment Effect among the Treated (ATT)

$$\tau = E[Y(1) - Y(0) | X = 1]$$
```{r}
#| echo: false
#| fig.height: 3.0
set.seed(10)
p |>
  mutate(color = ifelse(x > 0.8, "grey", col)) |>
ggplot(aes(x = x, y = y, color = color)) +
  geom_text(aes(label = col), position = "jitter") + 
  theme(legend.position = "none",
        axis.text = element_blank(),
        axis.ticks = element_blank()) +
  scale_color_manual(values = c("cornflower blue", "grey", "orange")) +
  labs(x = "", y = "") + 
  geom_vline(xintercept = c(0, 0.8))
```

## Matching in R (ATT)

```{r}
#| output-location: fragment
library(MatchIt)
m <- matchit(qsmk ~ sex + 
    race + age + I(age^2) + education + 
    smokeintensity + I(smokeintensity^2) + 
    smokeyrs + I(smokeyrs^2) + exercise + active + 
    wt71 + I(wt71^2), 
  data = nhefs_complete)
m
```

## Matching in R (ATT)

```{r}
#| output-location: fragment
matched_data <- get_matches(m, id = "i")
glimpse(matched_data)
```

## Target estimands

### Average Treatment Effect among the Controls (ATC)

$$\tau = E[Y(1) - Y(0) | X = 0]$$
```{r}
#| echo: false
#| fig.height: 3.0
set.seed(10)
p |>
  mutate(color = ifelse(x < 0.1, "grey", col)) |>
ggplot(aes(x = x, y = y, color = color)) +
  geom_text(aes(label = col), position = "jitter") + 
  theme(legend.position = "none",
        axis.text = element_blank(),
        axis.ticks = element_blank()) +
  scale_color_manual(values = c("cornflower blue", "grey", "orange")) +
  labs(x = "", y = "") + 
  geom_vline(xintercept = c(0.115, 1))
```

## Matching in R (ATC)

```{r}
#| output-location: fragment
library(MatchIt)
m <- matchit(qsmk ~ sex + 
    race + age + I(age^2) + education + 
    smokeintensity + I(smokeintensity^2) + 
    smokeyrs + I(smokeyrs^2) + exercise + active + 
    wt71 + I(wt71^2), 
  data = nhefs_complete,
  estimand = "ATC")
m
```

## Target estimands

### Average Treatment Effect among the Matched (ATM)

```{r}
#| echo: false
#| fig.height: 3.0
set.seed(10)
p |>
  mutate(color = ifelse(x < 0.1 | x > 0.8, "grey", col)) |>
ggplot(aes(x = x, y = y, color = color)) +
  geom_text(aes(label = col), position = "jitter") + 
  theme(legend.position = "none",
        axis.text = element_blank(),
        axis.ticks = element_blank()) +
  scale_color_manual(values = c("cornflower blue", "grey", "orange")) +
  labs(x = "", y = "") + 
  geom_vline(xintercept = c(0.115, 0.8))
```

## Matching in R (ATM)

```{r}
#| code-line-numbers: "|8-9"
#| output-location: slide
library(MatchIt)
m <- matchit(qsmk ~ sex + 
    race + age + I(age^2) + education + 
    smokeintensity + I(smokeintensity^2) + 
    smokeyrs + I(smokeyrs^2) + exercise + active + 
    wt71 + I(wt71^2), 
  data = nhefs_complete,
  link = "linear.logit", 
  caliper = 0.1) 
m
```

. . .

Observations with propensity scores (on the linear logit scale) within 0.1 standard errors (the caliper) will be discarded

## Matching in R (ATM)

```{r}
matched_data <- get_matches(m, id = "i")
glimpse(matched_data)
```

## *Your Turn 1*

```{r}
#| echo: false
#| eval: true
countdown::countdown(minutes = 10)
```

### Using the propensity scores you created in the previous exercise, create a "matched" data set using the ATM method with a caliper of 0.2.

## Propensity scores {background-color="#23373B".large}

Matching

**Weighting**

Stratification

Direct Adjustment

...

## Target estimands: ATE {background-color="#23373B"}

Average Treatment Effect (ATE)

$$\Large w_{ATE} = \frac{X_i}{p_i} + \frac{1-X_i}{1 - p_i}$$
```{r}
#| eval: false
(X / p) + ((1 - X) / (1 - p))
```



## Target estimands: ATT & ATC {background-color="#23373B"}

. . .

Average Treatment Effect Among the Treated (ATT)
$$\Large w_{ATT} = \frac{p_i X_i}{p_i} + \frac{p_i (1-X_i)}{1-p_i}$$

```{r}
#| eval: false
((p * X) / p) + ((p * (1 - X)) / (1 - p))
```

## Target estimands: ATT & ATC {background-color="#23373B"}

Average Treatment Effect Among the Controls (ATC)
$$\Large w_{ATC} = \frac{(1-p_i)X_i}{p_i} + \frac{(1-p_i)(1-X_i)}{(1-p_i)}$$

```{r}
#| eval: false
(((1 - p) * X) / p) + (((1 - p) * (1 - X)) / (1 - p))
```

## Target estimands: ATM & ATO {background-color="#23373B"}

. . .

Average Treatment Effect Among the Evenly Matchable (ATM)
$$\Large w_{ATM} = \frac{\min \{p_i, 1-p_i\}}{X_ip_i + (1-X_i)(1-p_i)}$$


```{r}
#| eval: false
pmin(p, 1 - p) / (X * p + (1 - X) * (1 - p))
```

## Target estimands: ATM & ATO {background-color="#23373B"}

Average Treatment Effect Among the Overlap Population
$$\Large w_{ATO} = (1-p_i)X_i + p_i(1-X_i)$$


```{r}
#| eval: false
(1 - p) * X + p * (1 - X)
```

## Histogram of propensity scores

```{r}
#| include: false
df <- propensity_model |>
  augment(type.predict = "response", data = nhefs_complete) |>
  mutate(wts = 1 / ifelse(qsmk == 0, 1 - .fitted, .fitted),
    w_ate = (qsmk / .fitted) + 
      ((1 - qsmk) / (1 - .fitted)),
    w_att = ((.fitted * qsmk) / .fitted) + 
      ((.fitted * (1 - qsmk)) / (1 - .fitted)),
    w_atc = (((1 - .fitted) * qsmk) / .fitted) + 
      (((1 - .fitted) * (1 - qsmk)) / (1 - .fitted)),
    w_atm = pmin(.fitted, 1 - .fitted) / 
      (qsmk * .fitted + (1 - qsmk) * (1 - .fitted)),
    w_ato = (1 - .fitted) * qsmk + 
      .fitted * (1 - qsmk),
    qsmk = factor(qsmk)
  )

d <- df |>
  pivot_wider(names_from = qsmk, values_from = .fitted, names_prefix = "qsmk_p")
```

```{r}
#| echo: false
#| message: false
#| warning: false
library(halfmoon)
ggplot(df, aes(.fitted)) + 
  geom_mirror_histogram(bins = 50, aes(group = qsmk)) + 
  geom_hline(yintercept = 0, lwd = 0.5) +
  ylab("count") + 
  xlab("propensity score") +
  scale_y_continuous(labels = abs) +
  theme(legend.position = "bottom")
```

## ATE

```{r}
#| echo: false
#| message: false
#| warning: false
ggplot(df, aes(.fitted)) + 
  geom_mirror_histogram(bins = 50, aes(group = qsmk)) + 
  geom_mirror_histogram(bins = 50, aes(fill = qsmk, weight = w_ate), alpha = 0.5) + 
  geom_hline(yintercept = 0, lwd = 0.5) +
  ylab("count") + 
  xlab("propensity score") +
  scale_y_continuous(labels = abs) +
  scale_fill_manual(values = c("green", "blue")) +
  theme(legend.position = "bottom")
```

## ATT

```{r}
#| echo: false
#| message: false
#| warning: false
ggplot(df, aes(.fitted)) + 
  geom_mirror_histogram(bins = 50, aes(group = qsmk)) + 
  geom_mirror_histogram(bins = 50, aes(fill = qsmk, weight = w_att), alpha = 0.5) + 
  geom_hline(yintercept = 0, lwd = 0.5) +
  ylab("count") + 
  xlab("propensity score") +
  scale_y_continuous(labels = abs) +
  scale_fill_manual(values = c("green", "blue")) +
  theme(legend.position = "bottom")
```

## ATC

```{r}
#| echo: false
#| message: false
#| warning: false
ggplot(df, aes(.fitted)) + 
  geom_mirror_histogram(bins = 50, aes(group = qsmk)) + 
  geom_mirror_histogram(bins = 50, aes(fill = qsmk, weight = w_atc), alpha = 0.5) + 
  geom_hline(yintercept = 0, lwd = 0.5) +
  ylab("count") + 
  xlab("propensity score") +
  scale_y_continuous(labels = abs) +
  scale_fill_manual(values = c("green", "blue")) +
  theme(legend.position = "bottom")
```

## ATM

```{r}
#| echo: false
#| message: false
#| warning: false
ggplot(df, aes(.fitted)) + 
  geom_mirror_histogram(bins = 50, aes(group = qsmk)) + 
  geom_mirror_histogram(bins = 50, aes(fill = qsmk, weight = w_atm), alpha = 0.5) + 
  geom_hline(yintercept = 0, lwd = 0.5) +
  ylab("count") + 
  xlab("propensity score") +
  scale_y_continuous(labels = abs) +
  scale_fill_manual(values = c("green", "blue")) +
  theme(legend.position = "bottom")
```

## ATO

```{r}
#| echo: false
#| message: false
#| warning: false
ggplot(df, aes(.fitted)) + 
  geom_mirror_histogram(bins = 50, aes(group = qsmk)) + 
  geom_mirror_histogram(bins = 50, aes(fill = qsmk, weight = w_ato), alpha = 0.5) + 
  geom_hline(yintercept = 0, lwd = 0.5) +
  ylab("count") + 
  xlab("propensity score") +
  scale_y_continuous(labels = abs) +
  scale_fill_manual(values = c("green", "blue")) +
  theme(legend.position = "bottom")
```

## ATE in R ![](images/hex/propensity.png){.absolute top=0 right=0 width=140}

<br />

Average Treatment Effect (ATE)
$w_{ATE} = \frac{X_i}{p_i} + \frac{1-X_i}{1 - p_i}$
  
```{r}
#| code-line-numbers: "|4"
library(propensity)
df <- propensity_model |>
  augment(type.predict = "response", data = nhefs_complete) |>
  mutate(w_ate = wt_ate(.fitted, qsmk)) 
```

## `Application Exercise`

```{r}
#| echo: false
#| eval: true
countdown::countdown(minutes = 10)
```

::: nonincremental
::: small
1. Using the propensity scores you created in the previous exercise, add the ATE weights to your data frame
2. *Stretch*: Using the same propensity scores, create ATM weights
:::
:::